var searchIndex = JSON.parse('{\
"linfa":{"doc":"<code>linfa</code> aims to provide a comprehensive toolkit to build …","t":[0,0,3,3,11,11,11,4,13,13,13,13,13,11,11,5,5,3,3,0,3,11,11,11,0,8,10,8,10,8,16,11,8,16,11,8,16,11,8,3,12,11,3,12,12,12,3,6,6,6,8,16,10,10,8,16,10,11,8,16,16,10,10,8,16,10,11,8,10,8,16,10,11,11,0,6,4,13,13,13,13,13,13,13,13,0,0,8,10,8,16,10,8,16,16,10,8,10,8,10,0,8,10,3,3,8,10,8,10,8,11,11,11,11,11,11,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["composing","platt_scaling","Platt","PlattParams","maxiter","minstep","sigma","PlattNewtonResult","LineSearchNotConverged","MaxIterReached","MaxIterZero","MinStepNegative","SigmaNegative","params","calibrate","platt_predict","platt_newton_method","MultiClassModel","MultiTargetModel","correlation","PearsonCorrelation","from_dataset","get_coeffs","get_p_values","dataset","WithLapack","with_lapack","WithoutLapack","without_lapack","WithLapackData","D","with_lapack","WithoutLapackData","D","without_lapack","Float","Lapack","cast","Label","Pr","0","even","DatasetBase","records","targets","weights","CountedTargets","Dataset","DatasetView","DatasetPr","Records","Elem","nsamples","nfeatures","AsTargets","Elem","as_multi_targets","try_single_target","FromTargetArray","Owned","View","new_targets","new_targets_view","AsTargetsMut","Elem","as_multi_targets_mut","try_single_target_mut","AsProbabilities","as_multi_target_probabilities","Labels","Elem","label_count","label_set","labels","error","Result","Error","Parameters","Priors","NotConverged","NdShape","NotEnoughSamples","MultipleTargets","Platt","MismatchedShapes","prelude","traits","Transformer","transform","Fit","Object","fit","IncrementalFit","ObjectIn","ObjectOut","fit_with","Predict","predict","PredictRef","predict_ref","metrics","BinaryClassification","roc","ConfusionMatrix","ReceiverOperatingCharacteristic","ToConfusionMatrix","confusion_matrix","SilhouetteScore","silhouette_score","MultiTargetRegression","max_error","mean_absolute_error","mean_squared_error","mean_squared_log_error","median_absolute_error","r2","explained_variance","SingleTargetRegression","max_error","mean_absolute_error","mean_squared_error","mean_squared_log_error","median_absolute_error","r2","explained_variance","predict","predict","predict","predict","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","predict","predict","predict","predict","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","predict","predict","predict","predict","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","nsamples","nfeatures","as_multi_targets","as_multi_targets","new_targets","new_targets_view","as_multi_targets_mut","as_multi_targets_mut","label_count","label_count","confusion_matrix","roc","silhouette_score","predict_ref","predict_ref","predict_ref","from","from","from","from","clone","clone","clone","default","eq","partial_cmp","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from_iter","from_iter","source","new","new","pearson_correlation","pearson_correlation_with_p_value","new","targets","weights","weight_for","feature_names","records","with_records","with_targets","with_weights","with_feature_names","map_targets","ntargets","sample_iter","view","feature_iter","target_iter","split_with_ratio","one_vs_all","label_frequencies_with_mask","label_frequencies","bootstrap","bootstrap_samples","bootstrap_features","shuffle","fold","sample_chunks","to_owned","iter_fold","cross_validate_multi","cross_validate","split_with_ratio","split_with_ratio","new","with_labels","with_lapack","without_lapack","precision","recall","accuracy","f_score","f1_score","mcc","split_one_vs_all","split_one_vs_one","get_curve","get_thresholds","area_under_curve","max_error","mean_absolute_error","mean_squared_error","mean_squared_log_error","median_absolute_error","r2","explained_variance","max_error","mean_absolute_error","mean_squared_error","mean_squared_log_error","median_absolute_error","r2","explained_variance"],"q":["linfa","linfa::composing","linfa::composing::platt_scaling","","","","","","","","","","","","","","","linfa::composing","","linfa","linfa::correlation","","","","linfa","linfa::dataset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa","linfa::error","","","","","","","","","","linfa","","linfa::traits","","","","","","","","","","","","","linfa","linfa::metrics","","","","","","","","","","","","","","","","","","","","","","","","linfa::composing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa::composing::platt_scaling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa::correlation","","","","","","","","","","","","","linfa::dataset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa::error","","","","","","","","","","","","","","","linfa::metrics","","","","","","","","","","","","","","","","","","","","","","","","linfa::dataset","","","","","","","","","","","","","linfa::composing","","linfa::composing::platt_scaling","linfa::dataset","","","linfa::error","linfa::composing::platt_scaling","linfa::dataset","linfa::error","linfa::composing::platt_scaling","linfa::dataset","","","linfa::composing::platt_scaling","linfa::dataset","linfa::error","linfa::metrics","linfa::composing::platt_scaling","linfa::correlation","linfa::error","linfa::composing","","linfa::error","linfa::composing","","linfa::dataset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa::metrics","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Composition models","Implement Platt calibration with Newton method","Fitted Platt model","Parameters for Platt’s Newton method","Set the maximum number of iterations in the optimization …","Set the minimum stepsize in the line search","Set the Hessian’s sigma value","Platt Newton’s method errors","","","","","","Create default parameter set for the Platt scaling …","Calibrate another model with Platt scaling","Predict a probability with the sigmoid function","Run Newton’s method to find optimal <code>A</code> and <code>B</code> values","Merge models with binary to multi-class classification","Merge models with single target to multi-target models","Correlation analysis for dataset features","Pearson Correlation Coefficients (or Bivariate …","Calculate the Pearson Correlation Coefficients and …","Return the Pearson’s Correlation Coefficients","Return the p values supporting the null-hypothesis","Datasets","Add the Lapack bound to the floating point of a dataset","","Remove the Lapack bound to the floating point of a dataset","","","","Add trait bound <code>Lapack</code> and <code>Scalar</code> to NdArray’s floating …","","","Add trait bound <code>Lapack</code> and <code>Scalar</code> to NdArray’s floating …","Floating point numbers","","","Discrete labels","Probability types","","","DatasetBase","","","","Targets with precomputed, counted labels","Dataset","DatasetView","DatasetPr","Record trait","","","","Return a reference to single or multiple target variables","","Returns a view on targets as two-dimensional array","Convert to single target, fails for more than one target","Helper trait to construct counted labels","","","Create self object from new target array","","","","Returns a mutable view on targets as two-dimensional array","Convert to single target, fails for more than one target","Convert to probability matrix","","Get the labels in all targets","","","","","Error types in Linfa","","","","","","","","","","","Linfa prelude.","Provide traits for different classes of algorithms","Transformation algorithms","","Fittable algorithms","","","Incremental algorithms","","","","Predict with model","","Predict with model for reference of dataset","","Common metrics functions for classification and regression","Classification for binary-labels","","Confusion matrix for multi-label evaluation","A Receiver Operating Characteristic for binary-label …","Classification for multi-label evaluation","","Evaluates the quality of a clustering using euclidean …","Evaluates the quality of a clustering.","Regression metrices trait for multiple targets.","Maximal error between two continuous variables","Mean error between two continuous variables","Mean squared error between two continuous variables","Mean squared log error between two continuous variables","Median absolute error between two continuous variables","R squared coefficient, is the proportion of the variance …","Same as R-Squared but with biased variance","Regression metrices trait for single targets.","Maximal error between two continuous variables","Mean error between two continuous variables","Mean squared error between two continuous variables","Mean squared log error between two continuous variables","Median absolute error between two continuous variables","R squared coefficient, is the proportion of the variance …","Same as R-Squared but with biased variancereate a wrapper model from a list of single-target models","Calculate the Pearson Correlation Coefficients from a …","Calculate the Pearson Correlation Coefficients and …","Create a new dataset from records and targets","Returns reference to targets","Returns optionally weights","Return a single weight","Returns feature names","Return records of a dataset","Updates the records of a dataset","Updates the targets of a dataset","Updates the weights of a dataset","Updates the feature names of a dataset","Map targets with a function <code>f</code>","Return the number of targets in the dataset","Iterate over observations","Creates a view of a dataset","Iterate over features","Iterate over targets","Split dataset into two disjoint chunks","Produce N boolean targets from multi-class targets","Calculates label frequencies from a dataset while masking …","Calculates label frequencies from a dataset","Apply bootstrapping for samples and features","Apply sample bootstrapping","Apply feature bootstrapping","Produces a shuffled version of the current Dataset.","Performs K-folding on the dataset. The dataset is divided …","","","Allows to perform k-folding cross validation on fittable …","Cross validation for multi-target algorithms","Cross validation for single target algorithms","Split dataset into two disjoint chunks","Split dataset into two disjoint chunks","","Transforms the input dataset by keeping only those …","Add trait bound <code>Lapack</code> and <code>Scalar</code> to NdArray’s floating …","Add trait bound <code>Lapack</code> and <code>Scalar</code> to NdArray’s floating …","Precision score, the number of correct classifications …","Recall score, the number of correct classifications in …","Accuracy score","F-beta-score","F1-score, this is the F-beta-score for beta=1","Matthew Correlation Coefficients","Split confusion matrix in N one-vs-all binary confusion …","Split confusion matrix in N*(N-1)/2 one-vs-one binary …","Returns the true-positive, false-positive curve","Returns the threshold corresponding to each point","Returns the Area-Under-Curve metric","Maximal error between two continuous variables","Mean error between two continuous variables","Mean squared error between two continuous variables","Mean squared log error between two continuous variables","Median absolute error between two continuous variables","R squared coefficient, is the proportion of the variance …","Same as R-Squared but with biased variance","Maximal error between two continuous variables","Mean error between two continuous variables","Mean squared error between two continuous variables","Mean squared log error between two continuous variables","Median absolute error between two continuous variables","R squared coefficient, is the proportion of the variance …","Same as R-Squared but with biased variance"],"i":[0,0,0,0,1,1,1,0,2,2,2,2,2,3,1,0,0,0,0,0,0,4,4,4,0,0,5,0,6,0,7,7,0,8,8,0,9,9,0,0,10,10,0,11,11,11,0,0,0,0,0,12,12,12,0,13,13,13,0,14,14,14,14,0,15,15,15,0,16,0,17,17,17,17,0,0,0,18,18,18,18,18,18,18,18,0,0,0,19,0,20,20,0,21,21,21,0,22,0,23,0,0,24,0,0,0,25,0,26,0,27,27,27,27,27,27,27,0,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,31,31,31,31,31,31,31,31,31,31,31,31,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,11,11,11,31,31,31,11,31,11,31,11,11,11,29,30,3,11,11,11,18,2,10,18,1,10,10,10,2,10,18,32,2,4,18,29,30,18,29,30,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,34,31,11,7,8,32,32,32,32,32,32,32,32,33,33,33,28,28,28,28,28,28,28,27,27,27,27,27,27,27],"f":[null,null,null,null,[[["usize",15]]],[[]],[[]],null,null,null,null,null,null,[[],["plattparams",3]],[[["datasetbase",3]],[["platt",3],["plattnewtonresult",4],["result",4]]],[[["float",8]],["pr",3]],[[["arrayview1",6],["plattparams",3],["arrayview1",6],["bool",15],["float",8]],[["result",4],["plattnewtonresult",4]]],null,null,null,null,[[["usize",15],["datasetbase",3],["option",4]]],[[],["array1",6]],[[],[["array1",6],["option",4]]],null,null,[[],["arraybase",3]],null,[[],["arraybase",3]],null,null,[[["arraybase",3]],["arraybase",3]],null,null,[[["arraybase",3]],["arraybase",3]],null,null,[[["numcast",8]]],null,null,null,[[],["pr",3]],null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[],["usize",15]],null,null,[[],["arrayview2",6]],[[],[["arrayview1",6],["result",6]]],null,null,null,[[["array2",6]]],[[["arrayview2",6]]],null,null,[[],["arrayviewmut2",6]],[[],[["arrayviewmut1",6],["result",6]]],null,[[],[["ix3",6],["pr",3],["cowarray",6]]],null,null,[[],[["vec",3],["hashmap",3]]],[[],[["hashset",3],["vec",3]]],[[],["vec",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,[[["datasetbase",3]],["result",4]],null,null,null,[[["datasetbase",3]]],null,[[]],null,[[]],null,null,[[],[["receiveroperatingcharacteristic",3],["result",6]]],null,null,null,[[],[["result",6],["confusionmatrix",3]]],null,[[],["result",6]],null,[[],[["array1",6],["result",6]]],[[],[["array1",6],["result",6]]],[[],[["array1",6],["result",6]]],[[],[["array1",6],["result",6]]],[[],[["array1",6],["result",6]]],[[],[["array1",6],["result",6]]],[[],[["array1",6],["result",6]]],null,[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["arraybase",3],["dim",3]],[["datasetbase",3],["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["datasetbase",3]]],[[["arraybase",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["arraybase",3],["dim",3]],[["datasetbase",3],["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["datasetbase",3]]],[[["arraybase",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["arraybase",3],["dim",3]],[["datasetbase",3],["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["datasetbase",3]]],[[["arraybase",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["arrayview2",6]],[[],["arrayview2",6]],[[["array2",6]]],[[["arrayview2",6]]],[[],["arrayviewmut2",6]],[[],["arrayviewmut2",6]],[[],[["vec",3],["hashmap",3]]],[[],[["vec",3],["hashmap",3]]],[[["datasetbase",3]],[["result",6],["confusionmatrix",3]]],[[["datasetbase",3]],[["receiveroperatingcharacteristic",3],["result",6]]],[[],["result",6]],[[["arraybase",3]],["array1",6]],[[["arraybase",3]],["array2",6]],[[["arraybase",3]],[["pr",3],["array1",6]]],[[["arraybase",3]]],[[]],[[]],[[["shapeerror",3]]],[[],["plattnewtonresult",4]],[[],["pr",3]],[[],["error",4]],[[]],[[],["bool",15]],[[["pr",3]],[["option",4],["ordering",4]]],[[],["f32",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],[["option",4],["error",8]]],[[["vec",3]]],[[["vec",3],["box",3]]],[[],["pearsoncorrelation",3]],[[["usize",15]],["pearsoncorrelation",3]],[[["intotargets",8]],["datasetbase",3]],[[]],[[],["option",4]],[[["usize",15]],["f32",15]],[[],[["vec",3],["string",3]]],[[]],[[["records",8]],[["datasetbase",3],["records",8]]],[[],["datasetbase",3]],[[["array1",6],["f32",15]],["datasetbase",3]],[[["into",8],["vec",3],["string",3]],["datasetbase",3]],[[["fnmut",8]],[["array2",6],["datasetbase",3]]],[[],["usize",15]],[[],["iter",3]],[[],[["arrayview2",6],["datasetbase",3]]],[[],[["datasetiter",3],["arraybase",3]]],[[],[["datasetiter",3],["arraybase",3]]],[[["f32",15]]],[[],[["result",6],["vec",3]]],[[],[["hashmap",3],["f32",15]]],[[],[["hashmap",3],["f32",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[],[["array2",6],["datasetbase",3]]],[[["usize",15]],["vec",3]],[[["usize",15]],["chunksiter",3]],[[],[["array2",6],["datasetbase",3]]],[[["usize",15],["fn",8]]],[[["usize",15]],[["result",4],["array2",6]]],[[["usize",15]],[["result",4],["arraybase",3]]],[[["f32",15]]],[[["f32",15]]],[[]],[[],[["datasetbase",3],["countedtargets",3],["array2",6]]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[["f32",15]],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],[["vec",3],["confusionmatrix",3]]],[[],[["vec",3],["confusionmatrix",3]]],[[],["vec",3]],[[],[["vec",3],["f32",15]]],[[],["f32",15]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],[["array1",6],["result",6]]],[[],[["array1",6],["result",6]]],[[],[["array1",6],["result",6]]],[[],[["array1",6],["result",6]]],[[],[["array1",6],["result",6]]],[[],[["array1",6],["result",6]]],[[],[["array1",6],["result",6]]]],"p":[[3,"PlattParams"],[4,"PlattNewtonResult"],[3,"Platt"],[3,"PearsonCorrelation"],[8,"WithLapack"],[8,"WithoutLapack"],[8,"WithLapackData"],[8,"WithoutLapackData"],[8,"Float"],[3,"Pr"],[3,"DatasetBase"],[8,"Records"],[8,"AsTargets"],[8,"FromTargetArray"],[8,"AsTargetsMut"],[8,"AsProbabilities"],[8,"Labels"],[4,"Error"],[8,"Transformer"],[8,"Fit"],[8,"IncrementalFit"],[8,"Predict"],[8,"PredictRef"],[8,"BinaryClassification"],[8,"ToConfusionMatrix"],[8,"SilhouetteScore"],[8,"MultiTargetRegression"],[8,"SingleTargetRegression"],[3,"MultiClassModel"],[3,"MultiTargetModel"],[3,"CountedTargets"],[3,"ConfusionMatrix"],[3,"ReceiverOperatingCharacteristic"],[6,"Dataset"]]},\
"linfa_bayes":{"doc":"Naive Bayes","t":[4,13,13,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BayesError","Stats","BaseCrate","Result","GaussianNbParams","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","from","default","fmt","fmt","fmt","source","fit","fit_with","params","var_smoothing"],"q":["linfa_bayes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An error when using a GaussianNB classifier","Error when performing Max operation on data","","","Gaussian Naive Bayes (GaussianNB)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fit the model","Incrementally fit on a batch of samples","Create new GaussianNB model with default values for its …","Specifies the portion of the largest variance of all the …"],"i":[0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,1,2,1,1,2,2,2,2],"f":[null,null,null,null,null,[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["minmaxerror",4]]],[[["error",4]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]]],[[]],[[["f64",15]]]],"p":[[4,"BayesError"],[3,"GaussianNbParams"]]},\
"linfa_clustering":{"doc":"<code>linfa-clustering</code> aims to provide pure Rust implementations…","t":[3,3,3,3,3,3,3,3,4,13,13,13,13,13,13,13,13,4,13,4,13,13,3,3,5,4,13,13,13,13,3,3,4,13,13,13,13,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AppxDbscan","AppxDbscanLabeler","AppxDbscanHyperParams","AppxDbscanHyperParamsBuilder","Dbscan","DbscanHyperParams","DbscanHyperParamsBuilder","GaussianMixtureModel","GmmError","InvalidValue","LinalgError","EmptyCluster","LowerBoundError","NotConverged","KMeansError","LinfaError","MinMaxError","GmmCovarType","Full","GmmInitMethod","KMeans","Random","GmmHyperParams","KMeans","compute_inertia","KMeansError","InvalidValue","InertiaError","NotConverged","LinfaError","KMeansHyperParams","KMeansHyperParamsBuilder","KMeansInit","Random","Precomputed","KMeansPlusPlus","KMeansPara","generate_blobs","generate_blob","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","predict","predict","predict","predict","init","deref","deref_mut","drop","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","predict","predict","predict","predict","init","deref","deref_mut","drop","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","eq","eq","ne","eq","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","source","source","predict_ref","predict_ref","predict_ref","fit","fit","transform","transform","transform","transform","transform","transform","transform","transform","transform","fit_with","params","new","labels","tolerance","slack","build","new","tolerance","minimum_points","slack","appx_tolerance","params","tolerance","build","new","tolerance","minimum_points","params","weights","means","covariances","precisions","centroids","new","n_clusters","covariance_type","tolerance","reg_covariance","n_runs","max_n_iterations","init_method","rng","with_covariance_type","with_tolerance","with_reg_covariance","with_n_runs","with_max_n_iterations","with_init_method","with_rng","validate","params","params_with_rng","centroids","cluster_count","inertia","fit","n_runs","max_n_iterations","tolerance","init_method","build","new","new_with_rng","n_runs","tolerance","max_n_iterations","n_clusters","init_method","rng"],"q":["linfa_clusteringd":["DBSCAN (Density-based Spatial Clustering of Applications …","Struct that labels a set of points according to the …","The set of hyperparameters that can be specified for the …","Helper struct used to construct a set of hyperparameters …","DBSCAN (Density-based Spatial Clustering of Applications …","The set of hyperparameters that can be specified for the …","Helper struct used to construct a set of hyperparameters …","Gaussian Mixture Model (GMM) aims at clustering a dataset …","An error when modeling a GMM algorithm","When any of the hyperparameters are set the wrong value","Errors encountered during linear algebra operations","When a cluster has no more data point while fitting GMM","When lower bound computation fails","When fitting EM algorithm does not converge","When initial KMeans fails","","","A specifier for the type of the relation between …","each component has its own general covariance matrix","A specifier for the method used for the initialization of …","GMM fitting algorithm is initalized with the esult of the …","GMM fitting algorithm is initialized randomly.","The set of hyperparameters that can be specified for the …","K-means clustering aims to partition a set of unlabeled …","We compute inertia defined as the sum of the squared …","An error when modeling a KMeans algorithm","When any of the hyperparameters are set the wrong value","When inertia computation fails","When fitting algorithm does not converge","","The set of hyperparameters that can be specified for the …","An helper struct used to construct a set of valid …","Specifies centroid initialization algorithm for KMeans.","Pick random points as centroids.","Precomputed list of centroids, represented as an array of …","K-means++ algorithm. Using this over random …","K-means|| algorithm, a parallelized version of K-means++. …","Given an input matrix <code>blob_centroids</code>, with shape …","Generate <code>blob_size</code> data points (a “blob”) around …iven an input matrix <code>observations</code>, with shape …","Given one input observation, return the index of its …","","Given an input matrix <code>observations</code>, with shape …","","","","","","","","","Given an input matrix <code>observations</code>, with shape …","Performs a single batch update of the Mini-Batch K-means …","","Runs the Approximated DBSCAN algorithm on the provided …","Gives the labels of every point provided in input to the …","Distance between points for them to be considered …","Approximation factor, allows the distance between two …","Return an instance of <code>AppxDbscanHyperParams</code> after having …","Minimum number of neighboring points a point needs to …","Two points are considered neighbors if the euclidean …","Minimum number of a points in a neighborhood around a …","Approximation factor, allows the distance between two …","Maximum approximated radius, equal to …","","Distance between points for them to be considered …","Return an instance of <code>DbscanHyperParams</code> after having …","Minimum number of neighboring points a point needs to …","Two points are considered neighbors if the euclidean …","Minimum number of a points in a neighborhood around a …","","","","","","","","","","","","","","","","Set the covariance type.","Set the convergence threshold. EM iterations will stop …","Non-negative regularization added to the diagonal of …","Set the number of initializations to perform. The best …","Set the number of EM iterations to perform.","Set the method used to initialize the weights, the means …","","","","","Return the set of centroids as a 2-dimensional matrix …","Return the number of training points belonging to each …","Return the sum of distances between each training point …","Shortcut for <code>.build().fit()</code>","Set the value of <code>n_runs</code>.","Set the value of <code>max_n_iterations</code>.","Set the value of <code>tolerance</code>.","Set the value of <code>init</code>.","Return an instance of <code>KMeansHyperParams</code> after having …","","<code>new</code> lets us configure our training algorithm parameters:","The final results will be the best output of n_runs …","The training is considered complete if the euclidean …","We exit the training loop when the number of training …","The number of clusters we will be looking for in the …","Cluster initialization strategy","Returns a clone of the random generator"],"i":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,2,0,3,3,0,0,0,0,4,4,4,4,0,0,0,5,5,5,5,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,4,4,4,4,4,4,4,4,4,4,4,4,4,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,4,6,8,10,11,13,2,3,14,15,16,5,6,8,8,10,11,11,13,13,2,15,15,16,16,5,5,6,8,10,11,13,1,2,3,14,15,4,16,5,1,4,1,4,13,15,15,14,16,8,8,9,9,11,11,12,12,15,16,6,7,7,9,9,9,8,8,8,8,8,10,12,12,11,11,11,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,17,17,17,17,17,17,16,16,16,16,16,16,16,16],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["arraybase",3],["arraybase",3],["arraybase",3]],["float",8]],null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["arraybase",3]],[["f64",15],["array2",6]]],[[["usize",15],["arraybase",3]],[["f64",15],["array2",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["datasetbase",3]]],[[["arraybase",3],["dim",3]],[["datasetbase",3],["arraybase",3]]],[[["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["datasetbase",3]]],[[["arraybase",3],["dim",3]],[["datasetbase",3],["arraybase",3]]],[[["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["linalgerror",4]]],[[["kmeanserror",4]]],[[["error",4]]],[[["minmaxerror",4]]],[[["error",4]]],[[],["appxdbscan",3]],[[],["appxdbscanhyperparams",3]],[[],["dbscan",3]],[[],["dbscanhyperparams",3]],[[]],[[],["gmmcovartype",4]],[[],["gmminitmethod",4]],[[],["gmmhyperparams",3]],[[],["kmeans",3]],[[],["kmeanshyperparams",3]],[[],["kmeansinit",4]],[[["appxdbscan",3]],["bool",15]],[[["appxdbscanhyperparams",3]],["bool",15]],[[["appxdbscanhyperparams",3]],["bool",15]],[[["dbscan",3]],["bool",15]],[[["dbscanhyperparams",3]],["bool",15]],[[["dbscanhyperparams",3]],["bool",15]],[[["gaussianmixturemodel",3]],["bool",15]],[[["gaussianmixturemodel",3]],["bool",15]],[[["gmmcovartype",4]],["bool",15]],[[["kmeans",3]],["bool",15]],[[["kmeans",3]],["bool",15]],[[["kmeanshyperparams",3]],["bool",15]],[[["kmeanshyperparams",3]],["bool",15]],[[["kmeansinit",4]],["bool",15]],[[["kmeansinit",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[],[["option",4],["error",8]]],[[["arraybase",3]],[["usize",15],["array1",6]]],[[["arraybase",3]],[["usize",15],["array1",6]]],[[["arraybase",3]],["usize",15]],[[["datasetbase",3]],[["gmmerror",4],["result",4]]],[[["datasetbase",3]],[["result",4],["kmeanserror",4]]],[[["arraybase",3]],[["array1",6],["option",4]]],[[["datasetbase",3],["arraybase",3]],[["arraybase",3],["array1",6],["datasetbase",3]]],[[["arraybase",3]],[["array1",6],["option",4]]],[[["datasetbase",3],["arraybase",3]],[["arraybase",3],["array1",6],["datasetbase",3]]],[[["arraybase",3]],[["array1",6],["option",4]]],[[["datasetbase",3],["arraybase",3]],[["arraybase",3],["array1",6],["datasetbase",3]]],[[["arraybase",3]],[["array1",6],["option",4]]],[[["datasetbase",3],["arraybase",3]],[["arraybase",3],["array1",6],["datasetbase",3]]],[[["arraybase",3]],["array1",6]],[[["datasetbase",3]]],[[["usize",15]],[["appxdbscanhyperparamsbuilder",3],["float",8]]],[[["arrayview2",6],["appxdbscanhyperparams",3]],["appxdbscanlabeler",3]],[[],["array1",6]],[[]],[[]],[[],["appxdbscanhyperparams",3]],[[["usize",15]],["appxdbscanhyperparamsbuilder",3]],[[]],[[],["usize",15]],[[]],[[]],[[["usize",15]],[["dbscanhyperparamsbuilder",3],["float",8]]],[[]],[[],["dbscanhyperparams",3]],[[["usize",15]],["dbscanhyperparamsbuilder",3]],[[]],[[],["usize",15]],[[["usize",15]],[["gmmhyperparams",3],["isaac64rng",3]]],[[],["array1",6]],[[],["array2",6]],[[],["array3",6]],[[],["array3",6]],[[],["array2",6]],[[["usize",15]],[["gmmhyperparams",3],["isaac64rng",3]]],[[],["usize",15]],[[],["gmmcovartype",4]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["gmminitmethod",4]],[[]],[[["gmmcovartype",4]]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[["gmminitmethod",4]]],[[["rng",8],["clone",8]],[["rng",8],["clone",8],["gmmhyperparams",3]]],[[],[["gmmerror",4],["result",4]]],[[["usize",15]],[["isaac64rng",3],["kmeanshyperparamsbuilder",3]]],[[["usize",15],["rng",8],["clone",8]],[["kmeanshyperparamsbuilder",3],["rng",8],["clone",8]]],[[],["array2",6]],[[],["array1",6]],[[]],[[["datasetbase",3]],[["kmeanserror",4],["result",4],["kmeans",3]]],[[["usize",15]]],[[["u64",15]]],[[]],[[["kmeansinit",4]]],[[],["kmeanshyperparams",3]],[[["usize",15]],[["isaac64rng",3],["kmeanshyperparamsbuilder",3]]],[[["usize",15]],["kmeanshyperparamsbuilder",3]],[[],["usize",15]],[[]],[[],["u64",15]],[[],["usize",15]],[[],["kmeansinit",4]],[[]]],"p":[[4,"GmmError"],[4,"GmmCovarType"],[4,"GmmInitMethod"],[4,"KMeansError"],[4,"KMeansInit"],[3,"AppxDbscan"],[3,"AppxDbscanLabeler"],[3,"AppxDbscanHyperParams"],[3,"AppxDbscanHyperParamsBuilder"],[3,"Dbscan"],[3,"DbscanHyperParams"],[3,"DbscanHyperParamsBuilder"],[3,"GaussianMixtureModel"],[3,"GmmHyperParams"],[3,"KMeans"],[3,"KMeansHyperParams"],[3,"KMeansHyperParamsBuilder"]]},\
"linfa_datasets":{"doc":"Datasets","t":[5,5,5,5],"n":["iris","diabetes","winequality","linnerud"],"q":["linfa_datasets","","",""],"d":["Read in the iris-flower dataset from dataset path.","Read in the diabetes dataset from dataset path","Read in the winequality dataset from dataset path","Read in the physical exercise dataset from dataset path."],"i":[0,0,0,0],"f":[[[],[["dataset",6],["f64",15],["usize",15]]],[[],[["dataset",6],["f64",15]]],[[],[["dataset",6],["f64",15],["usize",15]]],[[],[["dataset",6],["f64",15]]]],"p":[]},\
"linfa_elasticnet":{"doc":"Elastic Net","t":[4,13,13,13,6,3,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","NotEnoughSamples","IllConditioned","BaseCrate","Result","ElasticNetParams","penalty","l1_ratio","with_intercept","max_iterations","tolerance","ElasticNet","params","ridge","lasso","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","predict","predict","predict","predict","init","deref","deref_mut","drop","vzip","from","clone","fmt","fmt","source","predict_ref","fit","parameters","intercept","n_steps","duality_gap","z_score","confidence_95th","new","penalty","l1_ratio","with_intercept","tolerance","max_iterations","compute_intercept","validate_params"],"q":["linfa_elasticnet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","The input has not enough samples","The input is singular","","","Linear regression with both L1 and L2 regularization","","","","","","Elastic Net model","Create a default elastic net model","Create a ridge model","Create a lasso model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given an input matrix <code>X</code>, with shape …","Fit an elastic net model given a feature matrix <code>x</code> and a …","Get the fitted parameters","Get the fitted intercept, 0. if no intercept was fitted","Get the number of steps taken in optimization algorithm","Get the duality gap at the end of the optimization …","Calculate the Z score","Calculate the confidence level","Create default elastic net hyper parameters","Set the overall parameter penalty parameter of the …","Set l1_ratio parameter of the elastic net. Controls how …","Configure the elastic net model to fit an intercept. …","Set the tolerance which is the minimum absolute change in …","Set the maximum number of iterations for the optimization …","Compute the intercept as the mean of <code>y</code> and center <code>y</code> if an …","Validate the hyper parameters"],"i":[0,1,1,1,0,0,2,2,2,2,2,0,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,3,2,3,3,3,3,3,3,2,2,2,2,2,2,2,2],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[],["elasticnetparams",3]],[[],["elasticnetparams",3]],[[],["elasticnetparams",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["datasetbase",3]]],[[["dim",3],["arraybase",3]],[["arraybase",3],["datasetbase",3]]],[[["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["error",4]]],[[],["error",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["error",8],["option",4]]],[[["arraybase",3]],["array1",6]],[[["datasetbase",3]],["result",6]],[[],["array1",6]],[[]],[[],["u32",15]],[[]],[[],[["array1",6],["result",6]]],[[],[["array1",6],["result",6]]],[[],["elasticnetparams",3]],[[]],[[]],[[["bool",15]]],[[]],[[["u32",15]]],[[["arrayview1",6]]],[[],["result",6]]],"p":[[4,"Error"],[3,"ElasticNetParams"],[3,"ElasticNet"]]},\
"linfa_hierarchical":{"doc":"Hierarchical Clustering","t":[4,13,13,13,13,13,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Method","Single","Complete","Average","Weighted","Ward","Centroid","Median","HierarchicalCluster","with_method","num_clusters","max_distance","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","eq","from_str","clone","fmt","default","transform","transform","into_method_chain"],"q":["linfa_hierarchical","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A method for computing the dissimilarities between …","Assigns the minimum dissimilarity between all pairs of …","Assigns the maximum dissimilarity between all pairs of …","Assigns the average dissimilarity between all pairs of …","Assigns the weighted dissimilarity between clusters.","Assigns the Ward dissimilarity between clusters.","Assigns the centroid dissimilarity between clusters.","Assigns the median dissimilarity between clusters.","Agglomerative hierarchical clustering","Select a merging method","Stop merging when a certain number of clusters are reached","Stop merging when a certain distance is reached","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Perform hierarchical clustering of a similarity matrix","Perform hierarchical clustering of a similarity matrix","Convert this linkage method into a nearest neighbor chain …"],"i":[0,1,1,1,1,1,1,1,0,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,1],"f":[null,null,null,null,null,null,null,null,null,[[["method",4]],["hierarchicalcluster",3]],[[["usize",15]],["hierarchicalcluster",3]],[[],["hierarchicalcluster",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["method",4]],["bool",15]],[[["str",15]],[["method",4],["result",4],["error",4]]],[[],["method",4]],[[["formatter",3]],[["result",4],["error",3]]],[[],["hierarchicalcluster",3]],[[["kernel",6]],[["kernel",6],["vec",3],["datasetbase",3]]],[[["datasetbase",3],["kernel",6]],[["kernel",6],["vec",3],["datasetbase",3]]],[[],[["option",4],["methodchain",4]]]],"p":[[4,"Method"],[3,"HierarchicalCluster"]]},\
"linfa_ica":{"doc":"Independent Component Analysis (ICA)","t":[0,6,4,13,13,13,13,13,0,3,11,11,11,11,11,11,3,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["error","Result","FastIcaError","NotEnoughSamples","InvalidValue","SvdDecomposition","Linalg","LinfaError","fast_ica","FastIca","new","ncomponents","gfunc","max_iter","tol","random_state","FittedFastIca","GFunc","Logcosh","Exp","Cube","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","predict","predict","predict","predict","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","from","default","fmt","fmt","fmt","fmt","fmt","source","predict_ref","fit"],"q":["linfa_ica","linfa_ica::error","","","","","","","linfa_ica","linfa_ica::fast_ica","","","","","","","","","","","","linfa_ica::error","","","","","","","","","","","","","linfa_ica::fast_ica","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_ica::error","","linfa_ica::fast_ica","linfa_ica::error","linfa_ica::fast_ica","","","linfa_ica::error","","linfa_ica::fast_ica",""],"d":["","","An error when modeling FastICA algorithm","When there are no samples in the provided dataset","When any of the hyperparameters are set the wrong value","If we fail to compute any components of the SVD …","Errors encountered during linear algebra operations","","Fast algorithm for Independent Component Analysis (ICA)","Fast Independent Component Analysis (ICA)","Create new FastICA algorithm with default values for its …","Set the number of components to use, if not set all are …","G function used in the approximation to neg-entropy, …","Set maximum number of iterations during fit","Set tolerance on upate at each iteration","Set seed for random number generator for reproducible …","Fitted FastICA model for recovering the sources","Some standard non-linear functions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Recover the sources","Fit the model"],"i":[0,0,0,1,1,1,1,1,0,0,2,2,2,2,2,2,0,0,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,1,1,2,1,2,4,3,1,1,4,2],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[["usize",15]]],[[["gfunc",4]]],[[["usize",15]]],[[]],[[["usize",15]]],null,null,null,null,null,[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["datasetbase",3]]],[[["arraybase",3],["dim",3]],[["datasetbase",3],["arraybase",3]]],[[["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["linalgerror",4]]],[[["error",4]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["error",8],["option",4]]],[[["array2",6]],["array2",6]],[[["datasetbase",3]],["result",6]]],"p":[[4,"FastIcaError"],[3,"FastIca"],[4,"GFunc"],[3,"FittedFastIca"]]},\
"linfa_kernel":{"doc":"Kernel methods","t":[0,8,16,10,10,10,10,10,10,10,4,13,13,4,13,13,3,12,12,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["inner","Inner","Elem","dot","sum","size","column","to_upper_triangle","is_dense","diagonal","KernelInner","Dense","Sparse","KernelType","Dense","Sparse","KernelBase","inner","method","Kernel","KernelView","is_linear","params","dot","sum","size","column","to_upper_triangle","diagonal","new","view","new","view","to_owned","to_owned","KernelMethod","Gaussian","Linear","Polynomial","distance","is_linear","KernelParams","method","kind","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","clone","clone","fmt","nsamples","nfeatures","transform","transform","transform","transform","transform","transform"],"q":["linfa_kernel","linfa_kernel::inner","","","","","","","","","","","","linfa_kernel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_kernel::inner","","","","","","","","","","","","linfa_kernel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Specifies the methods an inner matrix of a kernel must be …","","","","","","","","","Allows a kernel to have either a dense or a sparse inner …","","","Kernel representation, can be either dense or sparse","","A sparse kernel requires to define a number of neighbours …","A generic kernel","","The inner product that will be used by the kernel","Type definition of Kernel that owns its inner matrix","Type definition of Kernel that borrows its inner matrix","Whether the kernel is a linear kernel","Generates the default set of parameters for building a …","Performs the matrix product between the kernel matrix and …","Sums all elements in the same row of the kernel matrix","Gives the size of the side of the square kernel matrix","Getter for a column of the kernel matrix","Getter for the data in the upper triangle of the kernel …","Getter for the elements in the diagonal of the kernel …","","Gives a KernelView which has a view on the original kernel…","","Gives a KernelView which has a view on the original kernel…","","","The inner product definition used by a kernel.","Gaussian(eps): exp(-norm(x - x’)/eps)","Euclidean inner product","Polynomial(constant, degree):  …","","","Defines the set of parameters needed to build a kernel","Setter for <code>method</code>. Can be chained with <code>kind</code> and <code>transform</code>.","Setter for <code>kind</code>. Can be chained with <code>method</code> and <code>transform</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds a kernel from a view of the input data.","Builds a kernel from a view of the input data.","Builds a kernel from a view of the input data.","Builds a new Dataset with the kernel as the records and …","Builds a new Dataset with the kernel as the records and …","Builds a new Dataset with the kernel as the records and …"],"i":[0,0,1,1,1,1,1,1,1,1,0,2,2,0,3,3,0,4,4,0,0,4,4,4,4,4,4,4,4,4,4,5,5,4,6,0,7,7,7,7,7,0,8,8,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,3,7,7,4,4,8,8,8,8,8,8],"f":[null,null,null,[[["arrayview2",6]],["array2",6]],[[],["array1",6]],[[],["usize",15]],[[["usize",15]],["vec",3]],[[],["vec",3]],[[],["bool",15]],[[],["array1",6]],null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["kernelparams",3]],[[["arrayview2",6]],["array2",6]],[[],["array1",6]],[[],["usize",15]],[[["usize",15]],["vec",3]],[[],["vec",3]],[[],["array1",6]],[[["kerneltype",4],["kernelmethod",4],["arrayview2",6]],["kernel",6]],[[],["kernelview",6]],[[["kerneltype",4],["kernelmethod",4],["arrayview2",6]],["kernel",6]],[[],["kernelview",6]],[[],["kernel",6]],[[],["kernel",6]],null,null,null,null,[[["arrayview1",6]]],[[],["bool",15]],null,[[["kernelmethod",4]],["kernelparams",3]],[[["kerneltype",4]],["kernelparams",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["kerneltype",4]],[[],["kernelmethod",4]],[[["formatter",3]],["result",6]],[[],["usize",15]],[[],["usize",15]],[[["array2",6]],["kernel",6]],[[["arrayview2",6]],["kernel",6]],[[["arrayview2",6]],["kernel",6]],[[["array2",6],["datasetbase",3]],[["datasetbase",3],["kernel",6]]],[[["datasetbase",3]],[["datasetbase",3],["kernel",6]]],[[["datasetbase",3]],[["datasetbase",3],["kernel",6]]]],"p":[[8,"Inner"],[4,"KernelInner"],[4,"KernelType"],[3,"KernelBase"],[6,"Kernel"],[6,"KernelView"],[4,"KernelMethod"],[3,"KernelParams"]]},\
"linfa_linear":{"doc":"<code>linfa-linear</code> aims to provide pure Rust implementations of …","t":[6,4,13,13,13,13,13,4,13,13,13,3,3,12,12,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Result","LinearError","Argmin","BaseCrate","NotEnoughSamples","NotEnoughTargets","LinalgError","Link","Identity","Log","Logit","TweedieRegressor","FittedTweedieRegressor","coef","intercept","Float","LinearRegression","FittedLinearRegression","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","predict","predict","predict","predict","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","predict","predict","predict","predict","from","from","from","clone","default","default","fmt","fmt","source","deserialize","deserialize","deserialize","deserialize","deserialize","serialize","serialize","serialize","serialize","serialize","predict_ref","predict_ref","fit","fit","link","link_derivative","inverse","inverse_derviative","new","alpha","fit_intercept","power","link","max_iter","tol","new","with_intercept","with_intercept_and_normalize","params","intercept"],"q":["linfa_linear","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","An error when modeling a Linear algorithm","Errors encountered when using argmin’s solver","","","","","Link functions used by GLM","The identity link function <code>g(x)=x</code>","The log link function <code>g(x)=log(x)</code>","The logit link function <code>g(x)=logit(x)</code>","Generalized Linear Model (GLM) with a Tweedie distribution","Fitted Tweedie regressor model for scoring","Estimated coefficients for the linear predictor","Intercept or bias added to the linear model","","An ordinary least squares linear regression model.","A fitted linear regression model which can be used for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Predict the target","Given an input matrix <code>X</code>, with shape …","","Fit a linear regression model given a feature matrix <code>X</code> …","Compute the link function <code>g(ypred)</code>","Computes the derivative of the link <code>g\'(ypred)</code>","Computes the inverse link function <code>h(linear predictor)</code>","Computes the derivative of the inverse link function …","","Constant that multiplies with the penalty term and thus …","Specifies whether a bias or intercept should be added to …","The power determines the underlying target distribution","The link function of the GLM, for mapping from linear …","Maximum number of iterations for the LBFGS solver","Stopping criterion for the LBFGS solver","Create a default linear regression model.","Configure the linear regression model to fit an intercept.…","Configure the linear regression model to fit an intercept …","Get the fitted parameters","Get the fitted intercept, 0. if no intercept was fitted"],"i":[0,0,1,1,1,1,1,0,2,2,2,0,0,3,3,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,2,4,5,1,1,1,2,4,3,5,6,2,4,3,5,6,3,6,4,5,2,2,2,2,4,4,4,4,4,4,4,5,5,5,6,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["datasetbase",3]]],[[["arraybase",3],["dim",3]],[["arraybase",3],["datasetbase",3]]],[[["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["datasetbase",3]]],[[["arraybase",3],["dim",3]],[["arraybase",3],["datasetbase",3]]],[[["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["error",3]]],[[["error",4]]],[[["linalgerror",4]]],[[],["link",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["arraybase",3]],["array1",6]],[[["arraybase",3]],["array1",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["array1",6]],[["float",8],["array1",6]]],[[["array1",6]],[["float",8],["array1",6]]],[[["array1",6]],[["float",8],["array1",6]]],[[["array1",6]],[["float",8],["array1",6]]],[[]],[[["f64",15]]],[[["bool",15]]],[[["f64",15]]],[[["link",4]]],[[["usize",15]]],[[["f64",15]]],[[],["linearregression",3]],[[["bool",15]]],[[]],[[],["array1",6]],[[]]],"p":[[4,"LinearError"],[4,"Link"],[3,"FittedTweedieRegressor"],[3,"TweedieRegressor"],[3,"LinearRegression"],[3,"FittedLinearRegression"]]},\
"linfa_logistic":{"doc":"Logistic Regression","t":[0,6,4,13,13,13,13,13,13,13,13,3,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["error","Result","Error","LinfaError","WrongNumberOfClasses","ArgMinError","MismatchedShapes","InvalidValues","InvalidGradientTolerance","InvalidInitialParametersGuessSize","InvalidInitialParametersGuess","LogisticRegression","new","alpha","with_intercept","max_iterations","gradient_tolerance","initial_params","FittedLogisticRegression","set_threshold","intercept","params","predict_probabilities","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","predict","predict","predict","predict","from","from","default","eq","ne","fmt","fmt","fmt","source","predict_ref","fit"],"q":["linfa_logistic","linfa_logistic::error","","","","","","","","","","linfa_logistic","","","","","","","","","","","","linfa_logistic::error","","","","","","","","","","","","","linfa_logistic","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_logistic::error","","linfa_logistic","","","linfa_logistic::error","linfa_logistic","linfa_logistic::error","","linfa_logistic",""],"d":["","","","","","","","","","","","A two-class logistic regression model.","Creates a new LogisticRegression with default …","Set the normalization parameter <code>alpha</code> used for L2 …","Configure if an intercept should be fitted, defaults to …","Configure the maximum number of iterations that the …","Configure the minimum change to the gradient to continue …","Configure the initial parameters from where the …","A fitted logistic regression which can make predictions","Set the probability threshold for which the ‘positive’…","","","Given a feature matrix, predict the probabilities that a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given a feature matrix, predict the classes learned when …","Given a 2-dimensional feature matrix array <code>x</code> with shape …"],"i":[0,0,0,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,0,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,2,3,3,1,3,1,1,3,2],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[],["logisticregression",3]],[[],["logisticregression",3]],[[["bool",15]],["logisticregression",3]],[[["u64",15]],["logisticregression",3]],[[],["logisticregression",3]],[[["array1",6]],["logisticregression",3]],null,[[],["fittedlogisticregression",3]],[[]],[[],["array1",6]],[[["arraybase",3]],["array1",6]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["datasetbase",3]]],[[["arraybase",3],["dim",3]],[["arraybase",3],["datasetbase",3]]],[[["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["error",4]]],[[["error",3]]],[[],["logisticregression",3]],[[["fittedlogisticregression",3]],["bool",15]],[[["fittedlogisticregression",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["error",8],["option",4]]],[[["arraybase",3]],["array1",6]],[[["datasetbase",3]],["result",6]]],"p":[[4,"Error"],[3,"LogisticRegression"],[3,"FittedLogisticRegression"]]},\
"linfa_nn":{"doc":"<code>linfa-nn</code> provides Rust implementations of common spatial …","t":[0,8,10,11,11,11,3,3,3,3,3,3,3,3,3,3,4,13,13,4,13,8,10,11,8,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["distance","Distance","distance","rdistance","rdist_to_dist","dist_to_rdist","L1Dist","L2Dist","LInfDist","LpDist","BallTreeIndex","BallTree","KdTreeIndex","KdTree","LinearSearchIndex","LinearSearch","BuildError","ZeroDimension","EmptyLeaf","NnError","WrongDimension","NearestNeighbour","from_batch_with_leaf_size","from_batch","NearestNeighbourIndex","k_nearest","within_range","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","distance","distance","rdistance","rdist_to_dist","dist_to_rdist","distance","distance","from_batch_with_leaf_size","from_batch_with_leaf_size","from_batch_with_leaf_size","k_nearest","within_range","k_nearest","within_range","k_nearest","within_range","from","clone","clone","clone","clone","clone","clone","clone","default","default","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","new","new","new","new","new","new"],"q":["linfa_nn","linfa_nn::distance","","","","","","","","","linfa_nn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_nn::distance","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_nn","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_nn::distance","","","","","","","linfa_nn","","","","","","","","","","","","","linfa_nn::distance","","","","linfa_nn","","","","","","","","","linfa_nn::distance","","","","linfa_nn","","","","","","","","",""],"d":["","A distance function that can be used in spatial …","Computes the distance between two points. For most …","A faster version of the distance metric that keeps the …","Converts the result of <code>rdistance</code> to <code>distance</code>","Converts the result of <code>distance</code> to <code>rdistance</code>","L1 or Manhattan distance","L2 or Euclidean distance","L-infinte or Chebyshev distance","L-p or Minkowsky distance","Spatial indexing structure created by <code>BallTree</code>","Implementation of ball tree, a space partitioning data …","Spatial indexing structure created by <code>KdTree</code>","Implementation of K-D tree, a space-partitioning data …","Spatial indexing structure created by <code>LinearSearch</code>","Implementation of linear search, which is the simplest …","Error returned when building nearest neighbour indices","","","Error returned when performing spatial queries on nearest …","","Nearest neighbour algorithm builds a spatial index …","Builds a spatial index using a MxN two-dimensional array …","Builds a spatial index using a default leaf size. See …","A spatial index structure over a set of points, created …","Returns the <code>k</code> points in the index that are the closest to …","Returns all the points in the index that are within the …reates a <code>BallTreeIndex</code> using the K-D construction …","Creates an instance of <code>BallTree</code>","Creates a new <code>KdTreeIndex</code>","Creates an instance of <code>KdTree</code>","Creates a new <code>LinearSearchIndex</code>","Creates an instance of <code>LinearSearch</code>"],"i":[0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,2,2,0,3,0,4,4,0,5,5,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,12,13,13,13,13,14,15,7,9,11,6,6,8,8,10,10,3,7,9,11,12,13,14,15,7,9,11,6,7,8,9,10,11,12,13,14,15,2,3,2,3,6,7,8,9,10,11],"f":[null,null,[[["arrayview1",6]]],[[["arrayview1",6]]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["array2",6]],[["builderror",4],["box",3],["result",4]]],[[["array2",6]],[["builderror",4],["box",3],["result",4]]],null,[[["usize",15],["arrayview1",6]],[["nnerror",4],["vec",3],["result",4]]],[[["arrayview1",6]],[["nnerror",4],["vec",3],["result",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["arrayview1",6]]],[[["arrayview1",6]]],[[["arrayview1",6]]],[[]],[[]],[[["arrayview1",6]]],[[["arrayview1",6]]],[[["usize",15],["array2",6]],[["builderror",4],["box",3],["result",4]]],[[["usize",15],["array2",6]],[["builderror",4],["box",3],["result",4]]],[[["usize",15],["array2",6]],[["builderror",4],["box",3],["result",4]]],[[["usize",15],["arrayview1",6]],[["nnerror",4],["vec",3],["result",4]]],[[["arrayview1",6]],[["nnerror",4],["vec",3],["result",4]]],[[["usize",15],["arrayview1",6]],[["nnerror",4],["vec",3],["result",4]]],[[["arrayview1",6]],[["nnerror",4],["vec",3],["result",4]]],[[["usize",15],["arrayview1",6]],[["nnerror",4],["vec",3],["result",4]]],[[["arrayview1",6]],[["nnerror",4],["vec",3],["result",4]]],[[["errorkind",4]]],[[],["balltree",3]],[[],["kdtree",3]],[[],["linearsearch",3]],[[],["l1dist",3]],[[],["l2dist",3]],[[],["linfdist",3]],[[],["lpdist",3]],[[],["balltree",3]],[[],["kdtree",3]],[[],["linearsearch",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15],["array2",6]],[["builderror",4],["result",4]]],[[]],[[["usize",15],["array2",6]],[["builderror",4],["result",4]]],[[]],[[["array2",6]],[["builderror",4],["result",4]]],[[]]],"p":[[8,"Distance"],[4,"BuildError"],[4,"NnError"],[8,"NearestNeighbour"],[8,"NearestNeighbourIndex"],[3,"BallTreeIndex"],[3,"BallTree"],[3,"KdTreeIndex"],[3,"KdTree"],[3,"LinearSearchIndex"],[3,"LinearSearch"],[3,"L1Dist"],[3,"L2Dist"],[3,"LInfDist"],[3,"LpDist"]]},\
"linfa_pls":{"doc":"Partial Least Squares","t":[6,4,13,13,13,13,13,13,3,3,8,3,11,11,11,11,3,11,11,11,11,11,11,3,11,11,11,11,3,11,11,11,11,11,11,3,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Result","PlsError","NotEnoughSamplesError","BadComponentNumberError","PowerMethodNotConvergedError","LinalgError","LinfaError","MinMaxError","PlsSvdParams","PlsSvd","Float","PlsRegressionParams","max_iterations","tolerance","scale","algorithm","PlsRegression","params","weights","loadings","rotations","coefficients","inverse_transform","PlsCanonicalParams","max_iterations","tolerance","scale","algorithm","PlsCanonical","params","weights","loadings","rotations","coefficients","inverse_transform","PlsCcaParams","max_iterations","tolerance","scale","algorithm","PlsCca","params","weights","loadings","rotations","coefficients","inverse_transform","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","predict","predict","predict","predict","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","predict","predict","predict","predict","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","predict","predict","predict","predict","from","from","from","clone","default","fmt","fmt","fmt","source","predict_ref","predict_ref","predict_ref","fit","fit","fit","fit","transform","transform","transform","transform","new","scale","params","weights"],"q":["linfa_plsd":["","","","","","","","","","","Add Scalar and Lapack trait bounds to the common Float …","","Set the maximum number of iterations of the power method …","Set the tolerance used as convergence criteria in the …","Set whether to scale the dataset","Set the algorithm used to estimate the first singular …","","","Singular vectors of the cross-covariance matrices","Loadings of records and targets","Projection matrices used to transform records and targets","The coefficients of the linear model such that Y is …","Transform the given dataset in the projected space back …","","Set the maximum number of iterations of the power method …","Set the tolerance used as convergence criteria in the …","Set whether to scale the dataset","Set the algorithm used to estimate the first singular …","","","Singular vectors of the cross-covariance matrices","Loadings of records and targets","Projection matrices used to transform records and targets","The coefficients of the linear model such that Y is …","Transform the given dataset in the projected space back …","","Set the maximum number of iterations of the power method …","Set the tolerance used as convergence criteria in the …","Set whether to scale the dataset","Set the algorithm used to estimate the first singular …","","","Singular vectors of the cross-covariance matrices","Loadings of records and targets","Projection matrices used to transform records and targets","The coefficients of the linear model such that Y is …","Transform the given dataset in the projected space back …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given an input matrix <code>X</code>, with shape …","Given an input matrix <code>X</code>, with shape …","Given an input matrix <code>X</code>, with shape …","","","","","","Apply dimension reduction to the given dataset","Apply dimension reduction to the given dataset","Apply dimension reduction to the given dataset","","","",""],"i":[0,0,1,1,1,1,1,1,0,0,0,0,2,2,2,2,0,3,3,3,3,3,3,0,4,4,4,4,0,5,5,5,5,5,5,0,6,6,6,6,0,7,7,7,7,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,1,1,1,8,8,1,8,1,1,3,5,7,8,2,4,6,9,3,5,7,8,8,9,9],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[]],[[["bool",15]]],[[["algorithm",4]]],null,[[["usize",15]],["plsregressionparams",3]],[[]],[[]],[[]],[[],["array2",6]],[[["datasetbase",3],["arraybase",3]],[["datasetbase",3],["array2",6]]],null,[[["usize",15]]],[[]],[[["bool",15]]],[[["algorithm",4]]],null,[[["usize",15]],["plscanonicalparams",3]],[[]],[[]],[[]],[[],["array2",6]],[[["datasetbase",3],["arraybase",3]],[["datasetbase",3],["array2",6]]],null,[[["usize",15]]],[[]],[[["bool",15]]],[[["algorithm",4]]],null,[[["usize",15]],["plsccaparams",3]],[[]],[[]],[[]],[[],["array2",6]],[[["datasetbase",3],["arraybase",3]],[["datasetbase",3],["array2",6]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["datasetbase",3]]],[[["arraybase",3],["dim",3]],[["arraybase",3],["datasetbase",3]]],[[["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["datasetbase",3]]],[[["arraybase",3],["dim",3]],[["arraybase",3],["datasetbase",3]]],[[["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["datasetbase",3]]],[[["arraybase",3],["dim",3]],[["arraybase",3],["datasetbase",3]]],[[["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["linalgerror",4]]],[[["error",4]]],[[["minmaxerror",4]]],[[],["plssvdparams",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[["arraybase",3]],["array2",6]],[[["arraybase",3]],["array2",6]],[[["arraybase",3]],["array2",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["arraybase",3],["datasetbase",3]],[["datasetbase",3],["array2",6]]],[[["arraybase",3],["datasetbase",3]],[["datasetbase",3],["array2",6]]],[[["arraybase",3],["datasetbase",3]],[["datasetbase",3],["array2",6]]],[[["arraybase",3],["datasetbase",3]],[["datasetbase",3],["array2",6]]],[[["usize",15]],["plssvdparams",3]],[[["bool",15]]],[[["usize",15]],["plssvdparams",3]],[[]]],"p":[[4,"PlsError"],[3,"PlsRegressionParams"],[3,"PlsRegression"],[3,"PlsCanonicalParams"],[3,"PlsCanonical"],[3,"PlsCcaParams"],[3,"PlsCca"],[3,"PlsSvdParams"],[3,"PlsSvd"]]},\
"linfa_preprocessing":{"doc":"Preprocessing","t":[0,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,0,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,4,13,13,13,3,11,11,11,11,11,11,11,11,3,11,11,11,0,3,11,11,11,0,4,13,13,13,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,0,4,13,13,13,3,11,11,11,11,3,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["count_vectorization","CountVectorizer","convert_to_lowercase","split_regex","n_gram_range","normalize","document_frequency","stopwords","fit","fit_files","fit_vocabulary","FittedCountVectorizer","nentries","transform","transform_files","vocabulary","error","Result","Error","WrongMeasureForScaler","TooManySubsamples","NotEnoughSamples","InvalidFloat","FlippedMinMaxRange","InvalidNGramBoundaries","FlippedNGramBoundaries","InvalidDocumentFrequencies","FlippedDocumentFrequencies","RegexError","IoError","EncodingError","LinalgError","NdarrayStatsEmptyError","LinfaError","linear_scaling","ScalingMethod","Standard","MinMax","MaxAbs","LinearScaler","new","method","standard","standard_no_mean","standard_no_std","min_max","min_max_range","max_abs","FittedLinearScaler","offsets","scales","method","norm_scaling","NormScaler","l2","l1","max","tf_idf_vectorization","TfIdfMethod","Smooth","NonSmooth","Textbook","compute_idf","TfIdfVectorizer","convert_to_lowercase","split_regex","n_gram_range","normalize","document_frequency","stopwords","fit","fit_vocabulary","fit_files","FittedTfIdfVectorizer","nentries","vocabulary","method","transform","transform_files","whitening","WhiteningMethod","Pca","Zca","Cholesky","Whitener","pca","zca","cholesky","method","FittedWhitener","transformation_matrix","mean","column_for_word","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","from","from","from","from","clone","clone","default","default","fmt","fmt","fmt","fmt","fmt","source","fit","fit","transform","transform","transform","transform","transform","transform"],"q":["linfa_preprocessing","linfa_preprocessing::count_vectorization","","","","","","","","","","","","","","","linfa_preprocessing","linfa_preprocessing::error","","","","","","","","","","","","","","","","","linfa_preprocessing","linfa_preprocessing::linear_scaling","","","","","","","","","","","","","","","","","linfa_preprocessing","linfa_preprocessing::norm_scaling","","","","linfa_preprocessing","linfa_preprocessing::tf_idf_vectorization","","","","","","","","","","","","","","","","","","","","","linfa_preprocessing","linfa_preprocessing::whitening","","","","","","","","","","","","linfa_preprocessing","linfa_preprocessing::count_vectorization","","","","","","","","","","","","","","","","","","","","","","","","linfa_preprocessing::error","","","","","","","","","","","","","linfa_preprocessing::linear_scaling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_preprocessing::norm_scaling","","","","","","","","","","","","linfa_preprocessing::tf_idf_vectorization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_preprocessing::whitening","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_preprocessing::error","","","","","linfa_preprocessing::linear_scaling","linfa_preprocessing::tf_idf_vectorization","linfa_preprocessing::count_vectorization","linfa_preprocessing::tf_idf_vectorization","linfa_preprocessing::error","linfa_preprocessing::linear_scaling","","linfa_preprocessing::error","linfa_preprocessing::linear_scaling","linfa_preprocessing::error","linfa_preprocessing::linear_scaling","linfa_preprocessing::whitening","linfa_preprocessing::linear_scaling","","linfa_preprocessing::norm_scaling","","linfa_preprocessing::whitening",""],"d":["Count vectorization methods","Count vectorizer: learns a vocabulary from a sequence of …","If true, all documents used for fitting will be converted …","Sets the regex espression used to split decuments into …","If set to <code>(1,1)</code> single tokens will be candidate …","If true, all charachters in the documents used for …","Specifies the minimum and maximum (relative) document …","List of entries to be excluded from the generated …","Learns a vocabulary from the documents in <code>x</code>, according to …","Learns a vocabulary from the documents contained in the …","Produces a FittedCountVectorizer with the input …","Counts the occurrences of each vocabulary entry, learned …","Number of vocabulary entries learned during fitting","Given a sequence of <code>n</code> documents, produces a sparse array …","Given a sequence of <code>n</code> file names, produces a sparse array …","Contains all vocabulary entries, in the same order used …","Error definitions for preprocessing","","","","","","","","","","","","","","","","","","Linear Scaling methods","Possible scaling methods for LinearScaler","","","","Linear Scaler: learns scaling parameters, according to …","Initializes the scaler with the specified method.","Setter for the scaler method","Initializes a Standard scaler","Initializes a Standard scaler that does not subract the …","Initializes a Stadard scaler that does not scale the …","Initializes a MinMax scaler with range [0,1]","Initializes a MinMax scaler with the specified minimum …","Initializes a MaxAbs scaler","The result of fitting a linear scaler. Scales datasets …","Array of size <code>n_features</code> that contains the offset that …","Array of size <code>n_features</code> that contains the scale that …","Returns the method used for fitting. Useful for printing, …","Sample normalization methods","Norm scaler: scales all samples in a dataset to have unit …","Initializes a norm scaler that uses l2 norm","Initializes a norm scaler that uses l1 norm","Initializes a norm scaler that uses max norm","Term frequency - inverse document frequency vectorization …","Methods for computing the inverse document frequency of a …","Computes the idf as <code>log(1+n/1+document_frequency) + 1</code>. …","Computes the idf as <code>log(n/document_frequency) +1</code>. The “…","Textbook definition of idf, computed as …","","Simlar to <code>CountVectorizer</code> but instead of just counting …","If true, all documents used for fitting will be converted …","Sets the regex espression used to split decuments into …","If set to <code>(1,1)</code> single tokens will be candidate …","If true, all charachters in the documents used for …","Specifies the minimum and maximum (relative) document …","List of entries to be excluded from the generated …","Learns a vocabulary from the texts in <code>x</code>, according to the …","Produces a FittedTfIdfVectorizer with the input …","","Counts the occurrences of each vocabulary entry, learned …","Number of vocabulary entries learned during fitting","Constains all vocabulary entries, in the same order used …","Returns the inverse document frequency method used in the …","Given a sequence of <code>n</code> documents, produces an array of …","","Methods for uncorrelating data","","","","","Struct that can be fitted to the input data to obtain the …","Creates an instance of a Whitener that uses the PCA method","Creates an instance of a Whitener that uses the ZCA …","Creates an instance of a Whitener that uses the cholesky …","","Struct that can be used to whiten data. Data will be …","The matrix used for scaling the data","The means that will be subtracted to the features before …its the input dataset accordng to the scaler method. …","","Scales an array of size (nsamples, nfeatures) according …","Substitutes the records of the dataset with their scaled …","Scales all samples in the array of shape (nsamples, …","Substitutes the records of the dataset with their scaled …","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,0,2,2,2,2,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,4,4,4,0,5,5,5,5,5,5,5,5,0,6,6,6,0,0,7,7,7,0,0,8,8,8,8,0,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,0,0,11,11,11,0,12,12,12,12,0,13,13,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,3,3,3,3,3,4,8,1,9,3,4,6,3,4,3,5,12,6,6,7,7,13,13],"f":[null,null,[[["bool",15]]],[[["str",15]]],[[["usize",15]]],[[["bool",15]]],[[["f32",15]]],[[]],[[["arraybase",3]],[["result",6],["fittedcountvectorizer",3]]],[[["encodingref",6],["decodertrap",4]],[["result",6],["fittedcountvectorizer",3]]],[[],[["result",6],["fittedcountvectorizer",3]]],null,[[],["usize",15]],[[["arraybase",3]],[["usize",15],["csmat",6]]],[[["encodingref",6],["decodertrap",4]],[["usize",15],["csmat",6]]],[[],["vec",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["scalingmethod",4]]],[[["scalingmethod",4]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["array1",6]],[[],["array1",6]],[[],["scalingmethod",4]],null,null,[[]],[[]],[[]],null,null,null,null,null,[[["usize",15]],["f64",15]],null,[[["bool",15]]],[[["str",15]]],[[["usize",15]]],[[["bool",15]]],[[["f32",15]]],[[]],[[["arraybase",3]],[["result",6],["fittedtfidfvectorizer",3]]],[[],[["result",6],["fittedtfidfvectorizer",3]]],[[["encodingref",6],["decodertrap",4]],[["result",6],["fittedtfidfvectorizer",3]]],null,[[],["usize",15]],[[],["vec",3]],[[],["tfidfmethod",4]],[[["arraybase",3]],[["f64",15],["csmat",6]]],[[["encodingref",6],["decodertrap",4]],[["f64",15],["csmat",6]]],null,null,null,null,null,null,[[]],[[]],[[]],[[["whiteningmethod",4]]],null,[[],["arrayview2",6]],[[],["arrayview1",6]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["error",4]]],[[["error",3]]],[[["linalgerror",4]]],[[["emptyinput",3]]],[[["error",4]]],[[],["scalingmethod",4]],[[],["tfidfmethod",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["array2",6]],["array2",6]],[[["datasetbase",3],["arraybase",3]],[["array2",6],["datasetbase",3]]],[[["array2",6]],["array2",6]],[[["datasetbase",3],["arraybase",3]],[["array2",6],["datasetbase",3]]],[[["array2",6]],["array2",6]],[[["datasetbase",3],["arraybase",3]],[["array2",6],["datasetbase",3]]]],"p":[[3,"CountVectorizer"],[3,"FittedCountVectorizer"],[4,"Error"],[4,"ScalingMethod"],[3,"LinearScaler"],[3,"FittedLinearScaler"],[3,"NormScaler"],[4,"TfIdfMethod"],[3,"TfIdfVectorizer"],[3,"FittedTfIdfVectorizer"],[4,"WhiteningMethod"],[3,"Whitener"],[3,"FittedWhitener"]]},\
"linfa_reduction":{"doc":"Dimensionality reduction techniques","t":[0,3,3,12,12,0,6,4,13,13,13,0,3,11,3,11,11,11,11,0,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["diffusion_map","DiffusionMap","DiffusionMapParams","steps","embedding_size","error","Result","Error","NotEnoughSamples","LinalgError","LinfaError","pca","PcaParams","whiten","Pca","params","explained_variance","explained_variance_ratio","singular_values","utils","to_gaussian_similarity","generate_swissroll","generate_convoluted_rings","generate_convoluted_rings2d","generate_blobs","generate_blob","DiffusionMap","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","predict","predict","predict","predict","from","from","clone","fmt","fmt","fmt","source","predict_ref","fit","transform","transform","params","estimate_clusters","eigvals","embedding","steps","validate"],"q":["linfa_reduction","linfa_reduction::diffusion_map","","","","linfa_reduction","linfa_reduction::error","","","","","linfa_reduction","linfa_reduction::pca","","","","","","","linfa_reduction","linfa_reduction::utils","","","","","","linfa_reduction","linfa_reduction::diffusion_map","","","","","","","","","","","","","","","","","","","","","","","","linfa_reduction::error","","","","","","","","","","","","","linfa_reduction::pca","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_reduction::error","","linfa_reduction::pca","linfa_reduction::error","linfa_reduction::pca","linfa_reduction::error","","linfa_reduction::pca","","linfa_reduction::diffusion_map","linfa_reduction::pca","linfa_reduction::diffusion_map","","","","",""],"d":["Diffusion Map","Embedding of diffusion map technique","Diffusion map hyperparameters","","","","","","","","","Principal Component Analysis","Pincipal Component Analysis parameters","Apply whitening to the embedding vector","Fitted Principal Component Analysis model","Create default parameter set","Return the amount of explained variance per element","Return the normalized amount of explained variance per …","Return the singular values","","Computes a similarity matrix with gaussian kernel and …","Generates a three dimension swiss roll, centered at the …","","","Given an input matrix <code>blob_centroids</code>, with shape …","Generate <code>blob_size</code> data points (a “blob”) around …","Embedding of diffusion map technique","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Project a kernel matrix to its embedding","","Creates the set of default parameters","Estimate the number of clusters in this embedding (very …","Return the eigenvalue of the diffusion operator","Return the embedding","Set the number of steps in the diffusion operator","Validates the parameter"],"i":[0,0,0,1,1,0,0,0,2,2,2,0,0,3,0,4,4,4,4,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,2,4,2,4,2,2,4,3,1,4,5,5,5,5,1,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[["bool",15]]],null,[[["usize",15]],["pcaparams",3]],[[],[["f64",15],["array1",6]]],[[],[["f64",15],["array1",6]]],[[],["array1",6]],null,[[["f64",15],["arraybase",3]],[["f64",15],["array2",6]]],[[["f64",15],["usize",15]],[["f64",15],["array2",6]]],[[["usize",15]],[["f64",15],["array2",6]]],[[["usize",15]],[["f64",15],["array2",6]]],[[["usize",15],["arraybase",3]],[["f64",15],["array2",6]]],[[["usize",15],["arraybase",3]],[["f64",15],["array2",6]]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["datasetbase",3]]],[[["dim",3],["arraybase",3]],[["arraybase",3],["datasetbase",3]]],[[["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["linalgerror",4]]],[[["error",4]]],[[],["pca",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[["arraybase",3]],["array2",6]],[[["datasetbase",3]],[["pca",3],["result",6]]],[[["kernel",6]],[["result",6],["diffusionmap",3]]],[[["arraybase",3],["datasetbase",3]],[["datasetbase",3],["array2",6]]],[[["usize",15]],["diffusionmapparams",3]],[[],["usize",15]],[[],["array1",6]],[[],["array2",6]],[[["usize",15]]],[[],["result",6]]],"p":[[3,"DiffusionMapParams"],[4,"Error"],[3,"PcaParams"],[3,"Pca"],[3,"DiffusionMap"]]},\
"linfa_svm":{"doc":"Support Vector Machines","t":[0,6,4,13,13,0,3,12,12,4,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,4,13,13,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["error","Result","SvmResult","Platt","BaseCrate","solver_smo","SolverParams","eps","shrinking","SeparatingHyperplane","Linear","WeightedCombination","SolverState","new","nactive","ntotal","target","bound","swap","update","max_violating_pair","max_violating_pair_nu","select_working_set","select_working_set_nu","should_shrunk","should_shrunk_nu","do_shrinking","do_shrinking_nu","calculate_rho","calculate_rho_nu","solve","SvmParams","eps","shrinking","with_kernel_params","with_platt_params","gaussian_kernel","polynomial_kernel","linear_kernel","pos_neg_weights","nu_weight","c_eps","nu_eps","ExitReason","ReachedThreshold","ReachedIterations","Svm","alpha","rho","params","nsupport","weighted_sum","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","predict","predict","predict","predict","init","deref","deref_mut","drop","vzip","from","from","clone","fmt","fmt","fmt","fmt","source","predict_ref","predict_ref","predict_ref","predict_ref","predict","predict","predict","predict","predict","predict","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit"],"q":["linfa_svm","linfa_svm::error","","","","linfa_svm","linfa_svm::solver_smo","","","","","","","","","","","","","","","","","","","","","","","","","linfa_svm","","","","","","","","","","","","","","","","","","","","","linfa_svm::error","","","","","","","","","","","","","linfa_svm::solver_smo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_svm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_svm::error","","linfa_svm::solver_smo","linfa_svm::error","linfa_svm","linfa_svm::error","linfa_svm","linfa_svm::error","linfa_svm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","Parameters of the solver routine","Stopping condition","Should we shrink, e.g. ignore bounded alphas","","","","Current state of the SMO solver","Initialize a solver state","Return number of active variables","Return number of total variables","Return target as positive/negative indicator","Return the k-th bound","Swap two variables","","Return max and min gradients of free variables","","Select optimal working set","Select optimal working set","","","","","","","","SVM Hyperparameters","Set stopping condition","Shrink active variable set","Set the kernel to use for training","Set the platt params for probability calibration","Sets the model to use the Gaussian kernel. For this …","Sets the model to use the Polynomial kernel. For this …","Sets the model to use the Linear kernel. For this kernel …","Set the C value for positive and negative samples.","Set the Nu value for classification","Set the C value for regression","Set the Nu-Eps value for regression","Reason for stopping","","","Fitted Support Vector Machines model","","","Create hyper parameter set","Returns the number of support vectors","Sums the inner product of <code>sample</code> and every one of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,0,0,2,2,0,3,3,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,0,6,6,0,7,7,7,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,1,1,2,1,6,1,7,1,7,7,7,7,7,7,7,7,7,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[["solverparams",3],["bool",15],["arrayview2",6],["vec",3],["vec",3]],["solverstate",3]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[]],[[]],[[]],[[]],[[],["svm",3]],null,[[]],[[["bool",15]]],[[["kernelparams",3]]],[[["plattparams",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[],["svmparams",3]],[[],["usize",15]],[[["arraybase",3]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["datasetbase",3]]],[[["arraybase",3],["dim",3]],[["datasetbase",3],["arraybase",3]]],[[["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["plattnewtonresult",4]]],[[["error",4]]],[[],["solverparams",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[["arraybase",3]],[["array1",6],["pr",3]]],[[["arraybase",3]],[["array1",6],["bool",15]]],[[["arraybase",3]],[["array1",6],["f32",15]]],[[["arraybase",3]],[["array1",6],["f64",15]]],[[["arraybase",3],["ix1",6]],["pr",3]],[[["arraybase",3],["ix1",6]],["bool",15]],[[["array1",6],["f32",15]],["f32",15]],[[["f32",15],["arrayview1",6]],["f32",15]],[[["array1",6],["f64",15]],["f64",15]],[[["f64",15],["arrayview1",6]],["f64",15]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]]],"p":[[4,"SvmResult"],[3,"SolverParams"],[4,"SeparatingHyperplane"],[3,"SolverState"],[3,"SvmParams"],[4,"ExitReason"],[3,"Svm"]]},\
"linfa_trees":{"doc":"Decision tree learning","t":[3,3,4,13,13,3,12,12,12,12,12,12,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["TreeNode","DecisionTree","SplitQuality","Gini","Entropy","DecisionTreeParams","split_quality","max_depth","min_weight_split","min_weight_leaf","min_impurity_decrease","phantom","NodeIter","Tikz","Result","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","predict","predict","predict","predict","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","next","clone","clone","clone","eq","fmt","fmt","fmt","fmt","fmt","hash","predict_ref","fit","is_leaf","depth","prediction","children","split","feature_name","params","iter_nodes","features","mean_impurity_decrease","relative_impurity_decrease","feature_importance","root_node","max_depth","num_leaves","export_to_tikz","split_quality","max_depth","min_weight_split","min_weight_leaf","min_impurity_decrease","validate","new","new","complete","with_legend"],"q":["linfa_trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A node in the decision tree","A fitted decision tree model for classification.","The metric used to determine the feature by which a node …","Measures the degree of probability of a randomly chosen …","Measures the entropy of a subtree, defined as the sum …","The set of hyperparameters that can be specified for …","","","","","","","Level-order (BFT) iterator of nodes in a decision tree","Struct to print a fitted decision tree in Tex using tikz …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Make predictions for each row of a matrix of features <code>x</code>.","Fit a decision tree using <code>hyperparamters</code> on the dataset …","Returns true if the node has no children","Returns the depth of the node in the decision tree","Returns <code>Some(prediction)</code> for leaf nodes and <code>None</code> for …","Returns both children, first left then right","Return the split (feature index, value) and its impurity …","Returns the name of the feature used in the split if the …","Defaults are provided if the optional parameters are not …","Create a node iterator in level-order (BFT)","Return features_idx of this tree (BFT)","Return the mean impurity decrease for each feature","Return the relative impurity decrease for each feature","Return the feature importance, i.e. the relative impurity …","Return root node of the tree","Return max depth of the tree","Return the number of leaves in this tree","Generates a <code>Tikz</code> structure to print the fitted tree in …","Sets the metric used to decide the feature on which to …","Sets the optional limit to the depth of the decision tree","Sets the minimum weight of samples required to split a …","Sets the minimum weight of samples that a split has to …","Sets the minimum decrease in impurity that a split needs …","Checks the correctness of the hyperparameters","","Creates a new Tikz structure for the decision tree with …","Whether a complete Tex document should be generated","Add a legend to the generated tree"],"i":[0,0,0,1,1,0,2,2,2,2,2,2,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,5,3,1,2,3,3,4,1,2,6,3,4,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,2,2,2,2,2,2,5,6,6,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["datasetbase",3]]],[[["arraybase",3],["dim",3]],[["arraybase",3],["datasetbase",3]]],[[["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["option",4]],[[],["treenode",3]],[[],["splitquality",4]],[[],["decisiontreeparams",3]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["arraybase",3]],["array1",6]],[[["datasetbase",3]],["result",6]],[[],["bool",15]],[[],["usize",15]],[[],["option",4]],[[],[["vec",3],["option",4]]],[[]],[[],[["option",4],["string",3]]],[[],["decisiontreeparams",3]],[[],["nodeiter",3]],[[],[["usize",15],["vec",3]]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["treenode",3]],[[],["usize",15]],[[],["usize",15]],[[],["tikz",3]],[[["splitquality",4]]],[[["usize",15],["option",4]]],[[["f32",15]]],[[["f32",15]]],[[]],[[],["result",6]],[[["vec",3],["treenode",3]]],[[["decisiontree",3]]],[[["bool",15]]],[[]]],"p":[[4,"SplitQuality"],[3,"DecisionTreeParams"],[3,"TreeNode"],[3,"DecisionTree"],[3,"NodeIter"],[3,"Tikz"]]},\
"linfa_tsne":{"doc":"t-distributed stochastic neighbor embedding","t":[6,4,13,13,13,13,13,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Result","TSneError","NegativePerplexity","PerplexityTooLarge","NegativeApproximationThreshold","EmbeddingSizeTooLarge","PreliminaryIterationsTooLarge","InvalidShape","BaseCrate","TSne","embedding_size","embedding_size_with_rng","approx_threshold","perplexity","max_iter","preliminary_iter","validate","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","from","fmt","fmt","source","transform","transform"],"q":["linfa_tsne","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","The t-SNE algorithm is a statistical method for …","Create a t-SNE param set with given embedding size","Create a t-SNE param set with given embedding size and …","Set the approximation threshold of the Barnes Hut …","Set the perplexity of the t-SNE algorithm","Set the maximal number of iterations","Set the number of iterations after which the true P …","Validates parameters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,2,2],"f":[null,null,null,null,null,null,null,null,null,null,[[["usize",15]],[["tsne",3],["smallrng",3]]],[[["usize",15]],["tsne",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["result",6]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["shapeerror",3]]],[[["error",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[["array2",6]],[["result",6],["array2",6]]],[[["datasetbase",3],["array2",6]],[["datasetbase",3],["result",6]]]],"p":[[4,"TSneError"],[3,"TSne"]]}\
}');
initSearch(searchIndex);